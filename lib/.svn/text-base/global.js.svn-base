var image_base_url="omglnx6.meas.ncsu.edu/sabgom_nfcast";


//Initialize the map
var latlng = new google.maps.LatLng(28, -85);
var myOptions = {
	      zoom: 5,
	      center: latlng,
	      mapTypeId: google.maps.MapTypeId.SATELLITE
	    };


//For figure display on the z-level
var imageBounds=new google.maps.LatLngBounds(
		new google.maps.LatLng(12.2,-106.2),
		new google.maps.LatLng(41.55,-62.3)
);

var availableDates=[];

var limitCoords=[
    new google.maps.LatLng(13.1637,-93.6625),
    new google.maps.LatLng(26.1681,-68.1901),
    new google.maps.LatLng(39.3735,-75.4297),
    new google.maps.LatLng(26.7714,-100.4297),
                 ];

var limitArea=new google.maps.Polyline({
    strokeColor: "#FF0000",
    strokeWeight:1   
});

var limitArea_polygon=new google.maps.Polygon({
	paths:limitCoords
});


var colors=[
["red","#FF0000"],["green","#00FF00"],
["blue","#0000FF"],["yellow","#FFFF00"],
["purple","#FF00FF"],["grey","#C0C0C0"],
["white","#FFFFFF"],["black","#000000"]	
            ];



var fileTypes=[['','_0000.png'],
               ['','_0300.png'],
               ['','_0600.png'],
               ['','_0900.png'],
               ['','_1200.png'],
               ['','_1500.png'],
               ['','_1800.png'],
               ['','_2100.png'],
               ['Currents_','.kmz'],
               ['salt_','.kml'],
               ['sss_','.png'],
               ['sst_','.kml'],
               ['sst_','.png']
               ]

var year;
var month;
var day;
var files;

function InitLatlng(map){
	
	limitArea.setMap(map);
	var path=limitArea.getPath();
	path.push(limitCoords[0]);
	path.push(limitCoords[1]);
	path.push(limitCoords[2]);
	path.push(limitCoords[3]);
	path.push(limitCoords[0]);
	
	// Create new control to display latlng and coordinates under mouse.
    var latLngControl = new LatLngControl(map);
    
    // Register event listeners
    google.maps.event.addListener(map, 'mouseover', function(mEvent) {
      latLngControl.set('visible', true);
    });
    google.maps.event.addListener(map, 'mouseout', function(mEvent) {
      latLngControl.set('visible', false);
    });
    google.maps.event.addListener(map, 'mousemove', function(mEvent) {
      latLngControl.updatePosition(mEvent.latLng);
    });
        
}


function LatLngControl(map) {
    /**
     * Offset the control container from the mouse by this amount.
     */
    this.ANCHOR_OFFSET_ = new google.maps.Point(8, 8);
    
    /**
     * Pointer to the HTML container.
     */
    this.node_ = this.createHtmlNode_();
    
    // Add control to the map. Position is irrelevant.
    map.controls[google.maps.ControlPosition.TOP].push(this.node_);
    
    // Bind this OverlayView to the map so we can access MapCanvasProjection
    // to convert LatLng to Point coordinates.
    this.setMap(map);
    
    // Register an MVC property to indicate whether this custom control
    // is visible or hidden. Initially hide control until mouse is over map.
    this.set('visible', false);
  }
  
  // Extend OverlayView so we can access MapCanvasProjection.
  LatLngControl.prototype = new google.maps.OverlayView();
  LatLngControl.prototype.draw = function() {};
  
  /**
   * @private
   * Helper function creates the HTML node which is the control container.
   * @return {HTMLDivElement}
   */
  LatLngControl.prototype.createHtmlNode_ = function() {
    var divNode = document.createElement('div');
    divNode.id = 'latlng-control';
    divNode.index = 100;
    return divNode;
  };
  
  /**
   * MVC property's state change handler function to show/hide the
   * control container.
   */
  LatLngControl.prototype.visible_changed = function() {
    this.node_.style.display = this.get('visible') ? '' : 'none';
  };
  
  /**
   * Specified LatLng value is used to calculate pixel coordinates and
   * update the control display. Container is also repositioned.
   * @param {google.maps.LatLng} latLng Position to display
   */
  LatLngControl.prototype.updatePosition = function(latLng) {
    var projection = this.getProjection();
    var point = projection.fromLatLngToContainerPixel(latLng);
    
    // Update control position to be anchored next to mouse position.
    this.node_.style.left = point.x + this.ANCHOR_OFFSET_.x + 'px';
    this.node_.style.top = point.y + this.ANCHOR_OFFSET_.y + 'px';
    
    // Update control to display latlng and coordinates.
    this.node_.innerHTML = [
      latLng.toUrlValue(4)
    ].join('');
  };

